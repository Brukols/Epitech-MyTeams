<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
        <!ENTITY rfc2223 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2223.xml">
        <!ENTITY rfc2578 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2578.xml">
        <!ENTITY rfc2579 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2579.xml">
        <!ENTITY rfc2580 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2580.xml">
        <!ENTITY rfc2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
        <!ENTITY rfc3410 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3410.xml">
        <!ENTITY rfc4181 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4181.xml">
        ]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<!-- Document  section

Specify the category attribute per RFC2026
options are info, std, bcp, or exp.

docname is the name of the output document. This is optional;
the default is to use the base portion of the XML filename.

For Internet-drafts, indicate which intellectual property notice
to use per the rules of RFC3978. The value (as of this template) can be:
    trust200902 -
    noModificationTrust200902 -
    noDerivativesTrust200902 -
    pre5378Trust200902 -

 The Intellectual Property section will be generated automatically by
  XML2RFC, based on the ipr attribute in the rfc element.

If this document obsoletes an RFC, specify the RFC in the "obsoletes" attribute
If this document updates an RFC, specify the RFC in the "updates" attribute
-->
<rfc category="historic" docName="RFC - My Teams" ipr="noModificationTrust200902">
    <front>
        <!--
    Enter the full document title and an abbreviated version
      to use in the page header.
    -->

        <title abbrev="My Teams">My Teams</title>

        <!-- copy the author block as many times as needed, one for each author.-->

        <!-- If the author is acting as editor, use the <role=editor> attribute-->

        <!-- see RFC2223 for guidelines regarding author names -->

        <author fullname="Bourgeois Benjamin" initials="BB" role="editor"
                surname="Bourgeois Benjamin">
            <organization>Epitech</organization>

            <address>

                <email>benjamin.bourgeois@epitech.eu</email>
            </address>
        </author>

        <author fullname="Ettel Jamil" initials="EJ" role="editor"
                surname="Ettel Jamil">
            <organization>Epitech</organization>

            <address>

                <email>jamil.ettel@epitech.eu</email>
            </address>
        </author>

        <author fullname="Lecomte Amaury" initials="LA" role="editor"
                surname="Lecomte Amaury">
            <organization>Epitech</organization>

            <address>

                <email>amaury.lecomte@epitech.eu</email>
            </address>
        </author>

        <!-- month and day will be generated automatically by XML2RFC;
    be sure the year is current.-->

        <date  year="2020" />

        <!--WG name at the upperleft corner of the doc,
    IETF is fine for non-WG IETF submissions -->

        <workgroup>Internet Engineering Task Force</workgroup>

        <keyword>Network Management</keyword>

        <keyword>Management Information Base</keyword>

    </front>

    <middle>
        <section title="Introduction">
            <!--You can echo the abstract in the Introduction, providing citations here,
      but you should provide more than just the abstract. -->

            <t>This memo defines a portion of the Management Information Base (MIB)
                for use with network management protocols. In particular it defines
                objects for managing the [TEMPLATE TODO].</t>

            <t><cref>[TEMPLATE TODO]: describe what functionality will be managed using this MIB
                module. Include citations for protocol specifications, architectures, related MIB modules, and protocol-specific
                management requirements. Provide an overview of why a MIB module is appropriate for this protocol,  whether there is a
                particular aspect of the protocol to be managed, and how the module is expected to be used to
                achieve particular goals. Highlight anything 'different' about the module. For example,
                a read-only MIB module.</cref></t>

        </section>

        <section title="Conventions">

            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                document are to be interpreted as described in BCP 14, RFC 2119 <xref
                        target="RFC2119"></xref>.</t>

        </section>

        <!-- ********************************************* -->

        <section title="Overview">

            <t></t>

        </section>


        <section title="Client">

            <section title="Overview">

                <t>
                    The client must be able to connect to one server, to send
                    multiple command to the server, and to receive reply
                    from server and display this information.
                </t>
                <t>
                    The client must send command in a specific format describe
                    later and decode response in a human read format.
                </t>
                <t>
                    You can find commands and reply-codes in Commands
                    Section(6) and Reply-Codes Section(7)
                </t>
                <t></t>

            </section>

            <section title="Send">

                <t>
                    The client must send command to server in a particular
                    format. Each command must be send with a specific header
                    like follow :
                </t>

                <figure>
                    <artwork>
<![CDATA[
    typedef struct __attribute__((packed))
    {
        unsigned char command;
        int message_size;
    } client_request_t;
]]>
                    </artwork>
                </figure>

                <t>
                    command : An unsigned char among this list corresponding to
                    the command associate with the request. Commands allowed
                    are :
                </t>

                <figure>
                    <artwork>
                        <![CDATA[
    enum command_code_e {
        UNKNOWN,
        HELP,
        LOGIN,
        LOGOUT,
        USERS,
        USER,
        SEND,
        MESSAGES,
        SUBSCRIBE,
        SUBSCRIBED,
        UNSUBSCRIBE,
        USE,
        CREATE,
        LIST,
        INFO
    };
]]>
                    </artwork>
                </figure>

                <t>
                    message size : The total size in bytes of all arguments
                    of the associated command after the header.
                </t>

                <t>
                    <list style="symbols">
                        <t>
                            The client can send information in one time or in
                            multiple time.
                        </t>
                        <t>
                            The client should verify the correct number and
                            type of each argument of the associated command.
                            There is another verification server side.
                        </t>
                        <t>
                            The header is followed by the command's arguments.
                        </t>
                    </list>
                </t>

            </section>

            <section title="Receive">

                <t>
                    The client receive replies from server in a particular
                    format. Each reply is preceded by a header in a format
                    like below :
                </t>

                <figure>
                    <artwork>
                        <![CDATA[
    typedef struct __attribute__((packed))
    {
        unsigned short reply;
        int message_size;
    } server_reply_t;
]]>
                    </artwork>
                </figure>

                <t>
                    reply : An unsigned short among this list corresponding to
                    the reply-code associate with the response. Reply-code
                    allowed are :
                </t>

                <figure>
                    <artwork>
                        <![CDATA[
    enum reply_code_e {
        COMMAND_OK = 200,
        PRINT_USER = 201,
        PRINT_USERS = 202,
        PRINT_TEAM = 210,
        PRINT_CHANNEL = 211,
        PRINT_THREAD = 212,
        PRINT_PRIVATE_MESSAGES = 220,
        PRINT_TEAMS = 230,
        PRINT_CHANNELS = 231,
        PRINT_THREADS = 232,
        PRINT_REPLIES = 233,
        PRINT_SUBSCRIBED = 240,
        PRINT_UNSUBSCRIBED = 241,
        PRINT_TEAM_CREATED = 250,
        PRINT_CHANNEL_CREATED = 251,
        PRINT_THREAD_CREATED = 252,
        PRINT_REPLY_CREATED = 253,

        EVENT_TEAM_CREATED = 311,
        EVENT_CHANNEL_CREATED = 312,
        EVENT_THREAD_CREATED = 313,
        EVENT_THREAD_MESSAGE_RECEIVED = 320,
        EVENT_PRIVATE_MESSAGE_RECEIVED = 321,
        EVENT_LOGGED_IN = 330,
        EVENT_LOGGED_OUT = 331,

        SYNTAX_ERROR = 500,
        SYNTAX_ERROR_ARGS = 501,
        NOT_IMPLEMENTED = 502,
        BAD_SEQUENCE = 503,
        NOT_IMPLEMENTED_ARG = 504,
        NOT_LOGGED_IN = 530,
        CLIENT_ALREADY_EXISTS = 540,
        UNKNOWN_COMMAND = 550,
        UNKNOWN_TEAM = 551,
        UNKNOWN_CHANNEL = 552,
        UNKNOWN_THREAD = 553,
        UNKNOWN_USER = 554,
        UNAUTHORIZED = 560,
    };
]]>
                    </artwork>
                </figure>

                <t>
                    message_size : The total size in bytes of all arguments
                    of the associated response after the header.
                </t>

                <t>
                    <list style="symbols">
                        <t>
                            The server can send information in one time or in
                            multiple time.
                        </t>
                        <t>
                            The header is followed by the reply's arguments.
                        </t>
                    </list>
                </t>

            </section>

        </section>

        <section title="Server">

            <t><cref>[TEMPLATE TODO]: The narrative part should include a section that specifies the
                relationship (if any) of the MIB modules contained in this internet drafts to
                other standards, particularly to standards containing other MIB
                modules. If the MIB modules defined by the specification import
                definitions from other MIB modules or are always implemented in
                conjunction with other MIB modules, then those facts should be noted in
                the narrataive section, as should any special interpretations of objects
                in other MIB modules. Note that citations may NOT be put into the MIB
                module portions of the internet draft, but documents used for Imported items
                are Normative references, so the citations should exist in the narrative
                section of the internet draft. The preferred
                way to fill in a REFERENCE clause in a MIB module is of the form: "Guidelines
                for Writing an IANA Considerations Section in RFCs", RFC2434, section 2.3.</cref></t>

            <section title="Overview">

                <t><cref>Example: The Interface MIB [RFC2863] requires that any
                    MIB module which is an adjunct of the Interface MIB clarify specific
                    areas within the Interface MIB. These areas were intentionally left
                    vague in the Interface MIB to avoid over-constraining the MIB, thereby
                    precluding management of certain media-types. Section 4 of [RFC2863] enumerates several
                    areas which a media-specific MIB must clarify. The implementor is
                    referred to [RFC2863] in order to understand the
                    general intent of these areas.</cref></t>

            </section>

            <section title="Send">

                <t><cref>[TEMPLATE TODO]: Citations are not permitted within a MIB module, but any
                    module mentioned in an IMPORTS clause or document mentioned in a
                    REFERENCE clause is a Normative reference, and must be cited someplace
                    within the narrative sections. If there are imported items in the MIB
                    module, such as Textual Conventions, that are not already cited, they
                    can be cited in text here. Since relationships to other MIB modules
                    should be described in the narrative text, this section is typically
                    used to cite modules from which Textual Conventions are imported. Example: "The following MIB module IMPORTS objects from SNMPv2-SMI [RFC2578],
                    SNMPv2-TC [RFC2579],
                    SNMPv2-CONF [RFC2580], and IF-MIB [RFC2863]."</cref></t>

            </section>

            <section title="Receive">

                <t><cref>[TEMPLATE TODO]: Citations are not permitted within a MIB module, but any
                    module mentioned in an IMPORTS clause or document mentioned in a
                    REFERENCE clause is a Normative reference, and must be cited someplace
                    within the narrative sections. If there are imported items in the MIB
                    module, such as Textual Conventions, that are not already cited, they
                    can be cited in text here. Since relationships to other MIB modules
                    should be described in the narrative text, this section is typically
                    used to cite modules from which Textual Conventions are imported. Example: "The following MIB module IMPORTS objects from SNMPv2-SMI [RFC2578],
                    SNMPv2-TC [RFC2579],
                    SNMPv2-CONF [RFC2580], and IF-MIB [RFC2863]."</cref></t>

            </section>
        </section>

        <section title="Commands">
            <t><cref>This section contains the actual MIB module(s).
                These MIB modules MUST be written in SMIv2 [RFC2578] [RFC2579]
                [RFC2580]. See Section 4 of RFC 4181 for guidelines on SMIv2 usage.
                See Appendix C of RFC 4181 for suggested naming conventions.</cref></t>

            <figure>
                <artwork><![CDATA[
[TEMPLATE TODO]: put your valid MIB module here.
A list of tools that can help automate the process of
checking MIB definitions can be found at the OPS
Area web site.]]></artwork>
            </figure>
        </section>

        <section title="Reply Codes">

            <section title="2XX">

                <t>The following reply codes are used for success. They are
                    sent to the user making the request. Here is a list of
                    all of the success reply codes, and their meaning :
                </t>

                <t>200 : Command OK.</t>
                <t>201 : when the user ask for a user in particular (/user or /info CLI command).
                    <list style="symbols">
                        <t>\param user_id a character pointer corresponding to
                            the universally unique id assigned to the user.</t>
                        <t>\param user_name a character pointer corresponding
                            to the user's name.</t>
                        <t>\param user_status an integer corresponding to the
                            user status (0 = not connected; 1 = connected).</t>
                    </list>
                </t>
                <t>202 : when the user ask for the users list (/list CLI command), used in a loop over each team.
                    <list style="symbols">
                        <t>\param user_id a character pointer corresponding to
                            the universally unique id assigned to the user.</t>
                        <t>\param user_name a character pointer corresponding
                            to the user's name.</t>
                        <t>\param user_status an integer corresponding to the
                            user status (0 = not connected; 1 = connected).</t>
                    </list>
                </t>
                <t>210 : when the user ask for a team in particular (/info CLI command).
                    <list style="symbols">
                        <t>\param team_id a character pointer corresponding to
                            the universally unique id assigned to the team.</t>
                        <t>\param team_name a character pointer corresponding
                            to the team's name.</t>
                        <t>\param team_description a character pointer
                            corresponding to the team's description.</t>
                    </list>
                </t>
                <t>211 : when the user ask for a channel in particular (/info CLI command).
                    <list style="symbols">
                        <t>\param channel_id a character pointer corresponding
                            to the universally unique id assigned to the channel.</t>
                        <t>\param channel_name a character pointer
                            corresponding to the channel's name.</t>
                        <t>\param channel_description a character pointer
                            corresponding to the channel's description.</t>
                    </list>
                </t>
                <t>212 : when the user ask for a thread in particular (/info CLI command).
                    <list style="symbols">
                        <t>\param thread_id a character pointer corresponding
                            to the universally unique id assigned to the thread.</t>
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            created the thread.</t>
                        <t>\param thread_timestamp an unsigned integer
                        corresponding to the timestamp of the thread's
                            creation.</t>
                        <t>\param thread_title a character pointer
                            corresponding to the thread title.</t>
                        <t>\param thread_body a character pointer corresponding
                            to the thread body.</t>
                    </list>
                </t>
                <t>220 : when the user ask for a specific private discussion (/messages CLI command), used in a loop over each message
                    <list style="symbols">
                        <t>\param sender_id a character pointer corresponding
                        to the universally unique id assigned to the user
                            sending the message</t>
                        <t>\param timestamp an unsigned integer corresponding
                            to the timestamp of the message.</t>
                        <t>\param message a character pointer corresponding to
                            the message.</t>
                    </list>
                </t>
                <t>230 : when the user ask for a team in particular (/info CLI command)
                    <list style="symbols">
                        <t>\param team_id a character pointer corresponding to
                            the universally unique id assigned to the team.</t>
                        <t>\param team_name a character pointer corresponding
                            to the team's name.</t>
                        <t>\param team_description a character pointer
                            corresponding to the team's description.</t>
                    </list>
                </t>
                <t>231 : when the user select a specific team to be in (/list CLI command), used in a loop over each channel
                    <list style="symbols">
                        <t>\param channel_id a character pointer corresponding
                        to the universally unique id assigned to the channel
                            in the team.</t>
                        <t>\param channel_name a character pointer
                            corresponding to the channel's name.</t>
                        <t>\param channel_description a character pointer
                            corresponding to the channel's description.</t>
                    </list>
                </t>
                <t>232 : when the user select a specific channel to be in (/list CLI command), used in a loop over each thread
                    <list style="symbols">
                        <t>\param thread_id a character pointer corresponding
                        to the universally unique id assigned to the thread
                            in the team.</t>
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            created the thread.</t>
                        <t>\param thread_timestamp an unsigned integer
                        corresponding to the timestamp of the thread's
                            creation.</t>
                        <t>\param thread_title a character pointer
                            corresponding to the thread title.</t>
                        <t>\param thread_body a character pointer corresponding
                            to the thread body.</t>
                    </list>
                </t>
                <t>233 : when the user ask for a specific thread (/list CLI command), used in a loop over each reply
                    <list style="symbols">
                        <t>\param thread_id a character pointer corresponding
                        to the universally unique id assigned to the thread
                            in the channel.</t>
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            created the thread.</t>
                        <t>\param reply_timestamp an unsigned integer
                            corresponding to the timestamp of the reply.</t>
                        <t>\param reply_body a character pointer corresponding
                            to the reply.</t>
                    </list>
                </t>
                <t>240 : when the user create a reply (/subscribe CLI command)
                    <list style="symbols">
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            subscribed;</t>
                        <t>\param team_id a character pointer corresponding to
                        the universally unique id assigned to the team the
                            user subscribed to.</t>
                    </list>
                </t>
                <t>241 : when the user create a reply (/unsubscribe CLI command)
                    <list style="symbols">
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            unsubscribed;</t>
                        <t>\param team_id a character pointer corresponding to
                        the universally unique id assigned to the team the
                            user unsubscribed from.</t>
                    </list>
                </t>
                <t>250 : when the user create a team (/create CLI command)
                    <list style="symbols">
                        <t>\param team_id a character pointer corresponding to
                            the universally unique id assigned to the team.</t>
                        <t>\param team_name a character pointer corresponding
                            to the team's name.</t>
                        <t>\param team_description a character pointer
                            corresponding to the team's description.</t>
                    </list>
                </t>
                <t>251 : when the user create a channel (/create CLI command)
                    <list style="symbols">
                        <t>\param channel_id a character pointer corresponding
                            to the universally unique id assigned to the channel.</t>
                        <t>\param channel_name a character pointer
                            corresponding to the channel's name.</t>
                        <t>\param channel_description a character pointer
                            corresponding to the channel's description.</t>
                    </list>
                </t>
                <t>252 : when the user create a thread (/create CLI command)
                    <list style="symbols">
                        <t>\param thread_id a character pointer corresponding
                            to the universally unique id assigned to the thread.</t>
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            created the thread.</t>
                        <t>\param thread_timestamp an unsigned integer
                        corresponding to the timestamp of the thread's
                            creation.</t>
                        <t>\param thread_title a character pointer
                            corresponding to the thread title.</t>
                        <t>\param thread_body a character pointer corresponding
                            to the thread body.</t>
                    </list>
                </t>
                <t>253 : when the user create a reply (/create CLI command)
                    <list style="symbols">
                        <t>\param thread_id a character pointer corresponding
                        to the universally unique id assigned to the thread
                            in the channel.</t>
                        <t>\param user_id a character pointer corresponding to
                        the universally unique id assigned to the user who
                            created the thread.</t>
                        <t>\param reply_timestamp an unsigned integer
                            corresponding to the timestamp of the reply.</t>
                        <t>\param reply_body a character pointer corresponding
                            to the reply.</t>
                    </list>
                </t>

            </section>

            <section title="3XX">


            </section>

            <section title="5XX">


            </section>

        </section>

    </middle>

    <back>

        <!-- References Section -->

        <!-- Section 4.7f of [RFC2223bis] specifies the requirements for the
       references sections.  In particular, there MUST be separate lists of
       normative and informative references, each in a separate section.
       The style SHOULD follow that of recently published RFCs.

       The standard MIB boilerplate available at
      the OPS Area web site includes lists of
       normative and informative references that MUST appear in all IETF
       specifications that contain MIB modules.  If items from other MIB
       modules appear in an IMPORTS statement in the Definitions section,
       then the specifications containing those MIB modules MUST be included
       in the list of normative references.  When items are imported from an
       IANA-maintained MIB module the corresponding normative reference
       SHALL reference the on-line version of that MIB module.  It is the
       policy of the RFC Editor that all references must be cited in the
       text;  such citations MUST appear in the overview section where
       documents containing imported definitions (other than those already
       mentioned in the MIB boilerplate) are required to be mentioned (cf.
       Section 3.2).

    In general, each normative reference SHOULD reference the most recent
    version of the specification in question.
    -->

        <references title="Normative References">
            <!-- [TEMPLATE TODO] rfc2119, 2578, 2579, and 2580 are required to support MIB
          module boilerplate text. -->

            &rfc2119;

            &rfc2578;

            &rfc2579;

            &rfc2580;

        </references>

        <references title="Informative References">

            <!--  RFC3410 is required to support the boilerplate text.-->
            &rfc2223;
            &rfc3410;

            &rfc2629;

            &rfc4181;

        </references>

        <references title="URL References">
            <reference anchor="idguidelines">
                <front>
                    <title>http://www.ietf.org/ietf/1id-guidelines.txt</title>
                    <author>
                        <organization>IETF Internet Drafts editor</organization>
                    </author>
                    <date year=""></date>
                </front>
            </reference>
            <reference anchor="idnits">
                <front>
                    <title>http://www.ietf.org/ID-Checklist.html</title>
                    <author>
                        <organization>IETF Internet Drafts editor</organization>
                    </author>
                    <date year=""></date>
                </front>
            </reference>
            <reference anchor="xml2rfc">
                <front>
                    <title>http://xml.resource.org</title>
                    <author>
                        <organization>XML2RFC tools and documentation</organization>
                    </author>
                    <date year=""></date>
                </front>
            </reference>
            <reference anchor="ops">
                <front>
                    <title>http://www.ops.ietf.org</title>
                    <author>
                        <organization>the IETF OPS Area</organization>
                    </author>
                    <date year=""></date>
                </front>
            </reference>
            <reference anchor="ietf">
                <front>
                    <title>http://tools.ietf.org</title>
                    <author>
                        <organization>IETF Tools Team</organization>
                    </author>
                    <date year=""></date>
                </front>
            </reference>

        </references>
    </back>
</rfc>