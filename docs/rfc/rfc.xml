<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2223 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2223.xml">
<!ENTITY rfc2578 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2578.xml">
<!ENTITY rfc2579 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2579.xml">
<!ENTITY rfc2580 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2580.xml">
<!ENTITY rfc2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY rfc3410 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3410.xml">
<!ENTITY rfc4181 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4181.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<!-- Document  section

Specify the category attribute per RFC2026
options are info, std, bcp, or exp.

docname is the name of the output document. This is optional;
the default is to use the base portion of the XML filename.

For Internet-drafts, indicate which intellectual property notice
to use per the rules of RFC3978. The value (as of this template) can be:
trust200902 -
noModificationTrust200902 -
noDerivativesTrust200902 -
pre5378Trust200902 -

The Intellectual Property section will be generated automatically by
XML2RFC, based on the ipr attribute in the rfc element.

If this document obsoletes an RFC, specify the RFC in the "obsoletes" attribute
If this document updates an RFC, specify the RFC in the "updates" attribute
-->
<rfc category="historic" docName="RFC - My Teams" ipr="noModificationTrust200902">
<front>
<!--
    Enter the full document title and an abbreviated version
    to use in the page header.
-->

<title abbrev="My Teams">My Teams</title>

<!-- copy the author block as many times as needed, one for each author.-->

<!-- If the author is acting as editor, use the <role=editor> attribute-->

<!-- see RFC2223 for guidelines regarding author names -->

<author fullname="Bourgeois Benjamin" initials="BB" role="editor"
        surname="Bourgeois Benjamin">
  <organization>Epitech</organization>

  <address>

    <email>benjamin.bourgeois@epitech.eu</email>
  </address>
</author>

<author fullname="Ettel Jamil" initials="EJ" role="editor"
        surname="Ettel Jamil">
  <organization>Epitech</organization>

  <address>

    <email>jamil.ettel@epitech.eu</email>
  </address>
</author>

<author fullname="Lecomte Amaury" initials="LA" role="editor"
        surname="Lecomte Amaury">
  <organization>Epitech</organization>

  <address>

    <email>amaury.lecomte@epitech.eu</email>
  </address>
</author>

<!-- month and day will be generated automatically by XML2RFC;
     be sure the year is current.-->

<date  year="2020" />

<!--WG name at the upperleft corner of the doc,
    IETF is fine for non-WG IETF submissions -->

<workgroup>Internet Engineering Task Force</workgroup>

<keyword>Network Management</keyword>

<keyword>Management Information Base</keyword>

</front>

<middle>
  <section title="Introduction">
    <!--You can echo the abstract in the Introduction, providing citations here,
        but you should provide more than just the abstract. -->

    <t>This memo defines how to use network management protocols in the My
      Teams project.</t>

  </section>

  <section title="Conventions">

    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in BCP 14, RFC 2119 <xref
    target="RFC2119"></xref>.</t>

  </section>

  <!-- ********************************************* -->

  <section title="Overview">

    <t></t>

  </section>


  <section title="Client">

    <section title="Overview">

      <t>
        The client must be able to connect to a server, to send
        multiple commands to it, to receive replies
        from it and to display the information to the user.
      </t>
      <t>
        The client must send command in a specific format described
        later and should display the reply in a human readable format.
      </t>
      <t>
        You can find commands and reply-codes in Commands
        Section(6) and Reply-Codes Section(7)
      </t>
      <t></t>

    </section>

    <section title="Send">

      <t>
        The client must send commands to server in a particular
        format. Each command must be sent with a specific header
        as follows:
      </t>

      <figure>
        <artwork>
          <![CDATA[
                   
typedef struct __attribute__((packed))
{
    unsigned char command;
    int message_size;
} client_request_t;
          ]]>
        </artwork>
      </figure>

      <t>
        command: An unsigned char from this list corresponding to
        the command associated with the request. Allowed commands
        are:
      </t>

      <figure>
        <artwork>
          <![CDATA[
                   
enum command_code_e {
    UNKNOWN,
    HELP,
    LOGIN,
    LOGOUT,
    USERS,
    USER,
    SEND,
    MESSAGES,
    SUBSCRIBE,
    SUBSCRIBED,
    UNSUBSCRIBE,
    USE,
    CREATE,
    LIST,
    INFO
};
          ]]>
        </artwork>
      </figure>

      <t>
        message_size: The total size in bytes of all arguments
        of the associated command after the header.
      </t>

      <t>
        <list style="symbols">
          <t>
            The header has a fixed size (5 bytes).
          </t>
          <t>
            The client should verify the number and
            type of each argument of the associated command.
            There is another verification server side.
          </t>
          <t>
            The header is followed by the command's arguments.
          </t>
        </list>
      </t>

    </section>

    <section title="Receive">

      <t>
        The client receives replies from the server in a particular
        format. Each reply is preceded by a request header in a specific format
        as shown below:
      </t>

      <figure>
        <artwork>
          <![CDATA[
                   typedef struct __attribute__((packed))
                   {
                   unsigned short reply;
                   int message_size;
                   } server_reply_t;
          ]]>
        </artwork>
      </figure>

      <t>
        reply: An unsigned short from this list corresponding to
        the reply-code associated with the reply. Allowed reply codes
        are:
      </t>

      <figure>
        <artwork>
          <![CDATA[                   
enum reply_code_e {
    COMMAND_OK = 200,
    PRINT_USER = 201,
    PRINT_USERS = 202,
    PRINT_TEAM = 210,
    PRINT_CHANNEL = 211,
    PRINT_THREAD = 212,
    PRINT_PRIVATE_MESSAGES = 220,
    PRINT_TEAMS = 230,
    PRINT_CHANNELS = 231,
    PRINT_THREADS = 232,
    PRINT_REPLIES = 233,
    PRINT_SUBSCRIBED = 240,
    PRINT_UNSUBSCRIBED = 241,
    PRINT_TEAM_CREATED = 250,
    PRINT_CHANNEL_CREATED = 251,
    PRINT_THREAD_CREATED = 252,
    PRINT_REPLY_CREATED = 253,
    
    EVENT_TEAM_CREATED = 311,
    EVENT_CHANNEL_CREATED = 312,
    EVENT_THREAD_CREATED = 313,
    EVENT_THREAD_MESSAGE_RECEIVED = 320,
    EVENT_PRIVATE_MESSAGE_RECEIVED = 321,
    EVENT_LOGGED_IN = 330,
    EVENT_LOGGED_OUT = 331,
    
    SYNTAX_ERROR = 500,
    SYNTAX_ERROR_ARGS = 501,
    NOT_IMPLEMENTED = 502,
    BAD_SEQUENCE = 503,
    NOT_IMPLEMENTED_ARG = 504,
    NOT_LOGGED_IN = 530,
    CLIENT_ALREADY_EXISTS = 540,
    UNKNOWN_COMMAND = 550,
    UNKNOWN_TEAM = 551,
    UNKNOWN_CHANNEL = 552,
    UNKNOWN_THREAD = 553,
    UNKNOWN_USER = 554,
    UNAUTHORIZED = 560,
};
          ]]>
        </artwork>
      </figure>

      <t>
        message_size: The total size in bytes of all arguments
        of the reply after the header.
      </t>

      <t>
        <list style="symbols">
          <t>
            The header has a fixed size (6 bytes).
          </t>
          <t>
            The header is followed by the arguments.
          </t>
        </list>
      </t>

    </section>

  </section>

  <section title="Server">
    <section title="Overview">

      <t>
        The server must be able to accept multiple clients, to send replies to a specific client, and to broadcast a message to multiple clients.
      </t>
      <t>
	    The server must be able to keep data about users, teams, channels and threads.
        Clients with the right permissions must be able to access that data.
        The server should store the data so it can be reused after a restart.
      </t>
      <t>
	    Users must be able to create teams, channels, and threads. They also must be able to create replies in threads and send private messages to other users.
        All of this information must be able to be accessed by users if they have the right permissions.
      </t>
      <t>
	    Some events must be broadcasted to multiple connected clients, please refer to the Reply Codes and Commands sections for more information about broadcasted events.
      </t>

    </section>

    <section title="Send">

      <t>
        The server must answer clients' requests with replies.
        A reply starts with a header describing the reply (unsigned short: fisrt two bytes) and the size of the arguments (int: last four bytes).
        The header is followed by the arguments of the reply.
      </t>
      <t>
        You may use the following structure for server replies:
      </t>

      <figure>
        <artwork>
          <![CDATA[
                  
 typedef struct __attribute__((packed))
 {
     unsigned short reply;
     int message_size;
 } server_reply_t;
          ]]>
        </artwork>
      </figure>

      <t>
        reply represents the reply code. Please refer to the Reply Code section for more information.
      </t>
      <t>
        messaege_size represents the size of the arguments. Arguments are detailed in the Reply Code section.
      </t>

    </section>

    <section title="Receive">

      <t>
        When a client sends a request, the server receives a header
        with an unsigned char (1 byte), representing the command, and an int
        for the message size.
      </t>
      <t>
        You may use the following structure for client replies:
      </t>

      <figure>
        <artwork>
          <![CDATA[
                   
typedef struct __attribute__((packed))
{
    unsigned char command;
    int message_size;
} client_request_t;
          ]]>
        </artwork>
      </figure>


      <t>
        The server must wait for the full message to be received before processing the request.
      </t>

    </section>
  </section>

  <section title="Commands">

    <section title="Help">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 200
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Login">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)} + {username : 32 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 501
- 330
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Logout">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 331 and 200
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Users">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 202
- 560
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="User">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)} + {User_uuid : 16 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 501
- 554
- 201
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Send">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)} + {Recipient_uuid : 16 bytes} + {Message : 512 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 501
- 554
- 321
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Messages">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)} + {Recipient_uuid : 16 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 501
- 554
- 220
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Subscribe">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)} + {User_uuid : 16 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 501
- 551
- 200
- 240
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Subscribed">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)};
- {Header (client_request_t)} + {Team_uuid : 16 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 503
- 551
- 202
- 230
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Unsubscribe">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)} + {Team_uuid : 16 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 501
- 551
- 241
- 200
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Use">
      <figure>
        <artwork>
          <![CDATA[
Send

- {Header (client_request_t)};
- {Header (client_request_t)} + {Team_uuid : 16 bytes};
- {Header (client_request_t)} + {Team_uuid : 16 bytes} + {Channel_uuid : 16 bytes};
- {Header (client_request_t)} + {Team_uuid : 16 bytes} + {Channel_uuid : 16 bytes}
   + {Thread_uuid : 16 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

- 560
- 200
- 503
- 551
- 552
- 553
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Create">
      <figure>
        <artwork>
          <![CDATA[
Send

When the context is not defined (/use):
- {Header (client_request_t)} + {Team_name : 32 bytes}
   + {Team_description : 255 bytes};

When team_uuid is defined (/use "team_uuid"):
- {Header (client_request_t)} + {Channel_name : 32 bytes}
   + {Channel_description : 255 bytes};

When team_uuid and channel_uuid are defined (/use "team_id" "channel_uuid"):
- {Header (client_request_t)} + {Thread_title : 32 bytes}
   + {Thread_message : 512 bytes};

When team_uuid, channel_uuid and thread_uuid are defined
(/use "team_uuid" "channel_uuid" "thread_uuid"):
- {Header (client_request_t)} + {Comment_body : 512 bytes};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

When the context is not defined (/use):
  - 560
  - 501
  - 540
  - 250
  - 311

When team_uuid is defined (/use "team_uuid"):
  - 560
  - 501
  - 540
  - 251
  - 312

When team_uuid and channel_uuid are defined (/use "team_id" "channel_uuid"):
  - 560
  - 501
  - 540
  - 252
  - 313

When team_uuid, channel_uuid and thread_uuid are defined
  - 560
  - 501
  - 540
  - 253
  - 320
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="List">
      <figure>
        <artwork>
          <![CDATA[
Send

When the context is not defined (/use):
- {Header (client_request_t)};

When team_uuid is defined (/use "team_uuid"):
- {Header (client_request_t)};

When team_uuid and channel_uuid are defined (/use "team_id" "channel_uuid"):
- {Header (client_request_t)};

When team_uuid, channel_uuid and thread_uuid are defined
(/use "team_uuid" "channel_uuid" "thread_uuid"):
- {Header (client_request_t)};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

For each response, a header is send.
 
When the context is not defined (/use):
 - 230
 - 560
 
When team_uuid is defined (/use "team_uuid"):
 - 231
 - 560
 
When team_uuid and channel_uuid are defined (/use "team_id" "channel_uuid"):
 - 232
 - 560
 
When team_uuid, channel_uuid and thread_uuid are defined
 - 233
 - 560
            ]]>
        </artwork>
      </figure>
    </section>

    <section title="Info">
      <figure>
        <artwork>
          <![CDATA[
Send

When the context is not defined (/use):
- {Header (client_request_t)};

When team_uuid is defined (/use "team_uuid"):
- {Header (client_request_t)};

When team_uuid and channel_uuid are defined (/use "team_id" "channel_uuid"):
- {Header (client_request_t)};

When team_uuid, channel_uuid and thread_uuid are defined
(/use "team_uuid" "channel_uuid" "thread_uuid"):
- {Header (client_request_t)};
            ]]>
        </artwork>
      </figure>
      <figure>
        <artwork>
          <![CDATA[
Receive

When the context is not defined (/use):
 - 201
 - 560
 
When team_uuid is defined (/use "team_uuid"):
 - 210
 - 560
 
When team_uuid and channel_uuid are defined (/use "team_id" "channel_uuid"):
 - 211
 - 560
 
When team_uuid, channel_uuid and thread_uuid are defined
 - 212
 - 560
            ]]>
        </artwork>
      </figure>
    </section>

  </section>

  <section title="Reply Codes">

    <section title="2XX">

      <t>The following reply codes are used for success. They are
      sent to the user making the request. Here is a list of
      all of the success reply codes, and their meaning:
      </t>

      <t>200: Command OK.
      <list style="symbols">
        <t>user_id (message_size bytes): a character pointer
        corresponding to the UUID
        assigned to the user.</t>
      </list>
      </t>
      <t>201: when a user asks for another user in particular (/user or /info CLI command).
      <list style="symbols">
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user.</t>
        <t>user_name: (32 bytes) a character pointer
        corresponding to the user's name.</t>
        <t>user_status: (1 bytes) an integer corresponding to
        the user status (0 = not connected; 1 =
        connected).</t>
      </list>
      </t>
      <t>202: when a user asks for the users list (/list CLI command), used in a loop over each team.
      <list style="symbols">
        <t>user_id (16 bytes): a character pointer
        corresponding to the UUID
        assigned to the user.</t>
        <t>user_name (32 bytes): a character pointer
        corresponding to the user's name.</t>
        <t>user_status (1 bytes): an integer corresponding to
        the user status (0 = not connected; 1 =
        connected).</t>
      </list>
      </t>
      <t>210: when a user asks for a team in particular (/info CLI command).
      <list style="symbols">
        <t>team_id (16 bytes): a character pointer
        corresponding to the UUID
        assigned to the team.</t>
        <t>team_name (32 bytes): a character pointer
        corresponding to the team's name.</t>
        <t>team_description (255 bytes): a character pointer
        corresponding to the team's description.</t>
      </list>
      </t>
      <t>211: when a user asks for a channel in particular (/info CLI command).
      <list style="symbols">
        <t>channel_id (16 bytes): a character pointer
        corresponding to the UUID
        assigned to the channel.</t>
        <t>channel_name (32 bytes): a character pointer
        corresponding to the channel's name.</t>
        <t>channel_description (255 bytes): a character pointer
        corresponding to the channel's description.</t>
      </list>
      </t>
      <t>212: when a user asks for a thread in particular (/info CLI command).
      <list style="symbols">
        <t>thread_id (16 bytes): a character pointer
        corresponding to the UUID
        assigned to the thread.</t>
        <t>user_id (16 bytes): a character pointer
        corresponding to the UUID
        assigned to the user who created the thread.</t>
        <t>thread_timestamp (16 bytes): an unsigned integer
        corresponding to the timestamp of the thread's
        creation.</t>
        <t>thread_title (32 bytes): a character pointer
        corresponding to the thread title.</t>
        <t>thread_body (512 bytes): a character pointer
        corresponding to the thread body.</t>
      </list>
      </t>
      <t>220: when a user asks for a specific private discussion (/messages CLI command), used in a loop over each message
      <list style="symbols">
        <t>sender_id (16 bytes): a character pointer
        corresponding to the UUID
        assigned to the user sending the message</t>
        <t>timestamp (16 bytes): an unsigned integer
        corresponding to the timestamp of the message.</t>
        <t>message (512 bytes): a character pointer
        corresponding to the message.</t>
      </list>
      </t>
      <t>230: when a user asks for a team in particular (/info CLI command)
      <list style="symbols">
        <t>team_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the team.</t>
        <t>team_name: (32 bytes) a character pointer
        corresponding to the team's name.</t>
        <t>team_description: (255 bytes) a character pointer
        corresponding to the team's description.</t>
      </list>
      </t>
      <t>231: when the user select a specific team to be in (/list CLI command), used in a loop over each channel
      <list style="symbols">
        <t>channel_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the channel in the team.</t>
        <t>channel_name: (32 bytes) a character pointer
        corresponding to the channel's name.</t>
        <t>channel_description: (255 bytes) a character pointer
        corresponding to the channel's description.</t>
      </list>
      </t>
      <t>232: when the user select a specific channel to be in (/list CLI command), used in a loop over each thread
      <list style="symbols">
        <t>thread_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the thread in the team.</t>
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user who created the thread.</t>
        <t>thread_timestamp: (16 bytes) an unsigned integer
        corresponding to the timestamp of the thread's
        creation.</t>
        <t>thread_title: (32 bytes) a character pointer
        corresponding to the thread title.</t>
        <t>thread_body: (512 bytes) a character pointer
        corresponding to the thread body.</t>
      </list>
      </t>
      <t>233: when a user asks for a specific thread (/list CLI command), used in a loop over each reply
      <list style="symbols">
        <t>thread_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the thread in the channel.</t>
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user who created the thread.</t>
        <t>reply_timestamp: (16 bytes) an unsigned integer
        corresponding to the timestamp of the reply.</t>
        <t>reply_body: (512 bytes) a character pointer
        corresponding to the reply.</t>
      </list>
      </t>
      <t>240: when the user create a reply (/subscribe CLI command)
      <list style="symbols">
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user who subscribed;</t>
        <t>team_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the team the user subscribed to.</t>
      </list>
      </t>
      <t>241: when the user create a reply (/unsubscribe CLI command)
      <list style="symbols">
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user who unsubscribed;</t>
        <t>team_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the team the user unsubscribed from.</t>
      </list>
      </t>
      <t>250: when the user create a team (/create CLI command)
      <list style="symbols">
        <t>team_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the team.</t>
        <t>team_name: (32 bytes) a character pointer
        corresponding to the team's name.</t>
        <t>team_description: (255 bytes) a character pointer
        corresponding to the team's description.</t>
      </list>
      </t>
      <t>251: when the user create a channel (/create CLI command)
      <list style="symbols">
        <t>channel_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the channel.</t>
        <t>channel_name: (32 bytes) a character pointer
        corresponding to the channel's name.</t>
        <t>channel_description: (255 bytes) a character pointer
        corresponding to the channel's description.</t>
      </list>
      </t>
      <t>252: when the user create a thread (/create CLI command)
      <list style="symbols">
        <t>thread_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the thread.</t>
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user who created the thread.</t>
        <t>thread_timestamp: (16 bytes) an unsigned integer
        corresponding to the timestamp of the thread's
        creation.</t>
        <t>thread_title: (32 bytes) a character pointer
        corresponding to the thread title.</t>
        <t>thread_body: (512 bytes) a character pointer
        corresponding to the thread body.</t>
      </list>
      </t>
      <t>253: when the user create a reply (/create CLI command)
      <list style="symbols">
        <t>thread_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the thread in the channel.</t>
        <t>user_id: (16 bytes) a character pointer
        corresponding to the UUID
        assigned to the user who created the thread.</t>
        <t>reply_timestamp: (16 bytes) an unsigned integer
        corresponding to the timestamp of the reply.</t>
        <t>reply_body: (512 bytes) a character pointer
        corresponding to the reply.</t>
      </list>
      </t>

    </section>

    <section title="3XX">
      <t>Here is the list of reply codes and their arguments used for broadcasting other users:</t>
      <t>311: A user has created a team
      <list style="symbols">
        <t>The uuid of the team: 16 bytes</t>
        <t>The name of the team: 32 bytes</t>
        <t>The description of the team: 255 bytes</t>
      </list>
      </t>
      <t>312: A user has created a channel
      <list style="symbols">
        <t>The uuid of the channel: 16 bytes</t>
        <t>The name of the channel: 32 bytes</t>
        <t>The description of the channel: 255 bytes</t>
      </list>
      </t>
      <t>313: A user has created a thread
      <list style="symbols">
        <t>The uuid of the thread: 16 bytes</t>
        <t>The uuid of the user who created the team: 16 bytes</t>
        <t>The time since the Epoch when the thread has been created: 16 bytes</t>
        <t>The title of the thread: 32 bytes</t>
        <t>The message body of the thread: 512 bytes</t>
      </list>
      </t>
      <t>320: A user has created a message in a thread
      <list style="symbols">
        <t>The uuid of the team: 16 bytes</t>
        <t>The uuid of the thread: 16 bytes</t>
        <t>The uuid of the user: 16 bytes</t>
        <t>The body of the message: 512 bytes</t>
      </list>
      </t>
      <t>321: A user has sended a private message
      <list style="symbols">
        <t>The uuid of the user: 16 bytes</t>
        <t>The body of the message: 512 bytes</t>
      </list>
      </t>
      <t>330: A user logged in
      <list style="symbols">
        <t>The uuid of the user: 16 bytes</t>
        <t>The name of the user: 32 bytes</t>
      </list>
      </t>
      <t>331: A user logged out
      <list style="symbols">
        <t>The uuid of the user: 16 bytes</t>
        <t>The name of the user: 32 bytes</t>
      </list>
      </t>
    </section>
    <section title="5XX">
      <t>The following reply codes are used for errors. They are sent to the user making the request. Here is a list of all of the error reply codes, and their meaning:</t>
      
      <t>
        500: Syntax Error.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        501: Error in arguments.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        502: Command not implemented.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        503: Bad sequence of commands.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        504: Command not implemented for that parameter.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        530: Not logged in.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        540: Already exists.
        <list style="symbols">
          <t>Nothing should be sent after the header</t>
        </list>
      </t>
      <t>
        550: Unknown command.
        <list style="symbols">
          <t>The error message: string</t>
        </list>
      </t>
      <t>
        551: Unknown team.
        <list style="symbols">
          <t>Unknown team's UUID: 16 bytes</t>
        </list>
      </t>
      <t>
        552: Unknown channel.
        <list style="symbols">
          <t>Unknown channel's UUID: 16 bytes</t>
        </list>
      </t>
      <t>
        553: Unknown thread.
        <list style="symbols">
          <t>Unknown thread's UUID: 16 bytes</t>
        </list>
      </t>
      <t>
        554: Unknown user.
        <list style="symbols">
          <t>Unknown user's UUID: 16 bytes</t>
        </list>
      </t>
      <t>
        560: Forbidden, access denied.
        <list style="symbols">
          <t>Unknown user's UUID: 16 bytes</t>
        </list>
      </t>
    </section>

  </section>

</middle>

<back>

  <!-- References Section -->

  <!-- Section 4.7f of [RFC2223bis] specifies the requirements for the
       references sections.  In particular, there MUST be separate lists of
       normative and informative references, each in a separate section.
       The style SHOULD follow that of recently published RFCs.

The standard MIB boilerplate available at
the OPS Area web site includes lists of
normative and informative references that MUST appear in all IETF
specifications that contain MIB modules.  If items from other MIB
modules appear in an IMPORTS statement in the Definitions section,
then the specifications containing those MIB modules MUST be included
in the list of normative references.  When items are imported from an
IANA-maintained MIB module the corresponding normative reference
SHALL reference the on-line version of that MIB module.  It is the
policy of the RFC Editor that all references must be cited in the
text;  such citations MUST appear in the overview section where
documents containing imported definitions (other than those already
mentioned in the MIB boilerplate) are required to be mentioned (cf.
Section 3.2).

In general, each normative reference SHOULD reference the most recent
version of the specification in question.
  -->

  <references title="Normative References">
    <!-- [TEMPLATE TODO] rfc2119, 2578, 2579, and 2580 are required to support MIB
         module boilerplate text. -->

    &rfc2119;

    &rfc2578;

    &rfc2579;

    &rfc2580;

  </references>

  <references title="Informative References">

    <!--  RFC3410 is required to support the boilerplate text.-->
    &rfc2223;
    &rfc3410;

    &rfc2629;

  </references>

  <references title="URL References">
    <reference anchor="idguidelines">
      <front>
        <title>http://www.ietf.org/ietf/1id-guidelines.txt</title>
        <author>
          <organization>IETF Internet Drafts editor</organization>
        </author>
        <date year=""></date>
      </front>
    </reference>
    <reference anchor="xml2rfc">
      <front>
        <title>http://xml.resource.org</title>
        <author>
          <organization>XML2RFC tools and documentation</organization>
        </author>
        <date year=""></date>
      </front>
    </reference>
    <reference anchor="ietf">
      <front>
        <title>http://tools.ietf.org</title>
        <author>
          <organization>IETF Tools Team</organization>
        </author>
        <date year=""></date>
      </front>
    </reference>

  </references>
</back>
</rfc>
